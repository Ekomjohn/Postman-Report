{
	"info": {
		"_postman_id": "843e3da0-48d6-4caa-a915-eda9139f8df5",
		"name": "Data Driven",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32894279"
	},
	"item": [
		{
			"name": "Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{datadriven}}/status",
					"host": [
						"{{datadriven}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", ()=> { \r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Length is 161\", ()=> {\r",
							"pm.expect(pm.response.headers.get(\"Content-Length\")).to.eql('161');\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"The Russian\");\r",
							"});\r",
							"\r",
							"//Parse response body into jsonData\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"  pm.expect(jsonData).to.be.an(\"object\"); \r",
							"  pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.author).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.available).to.be.a(\"boolean\");\r",
							"  pm.expect(jsonData[\"current-stock\"]).to.be.a(\"number\"); // Using bracket notation\r",
							"});\r",
							"\r",
							"pm.test(\"Values of the response body\", () => {\r",
							"    pm.expect(jsonData.id).to.eql(1);  \r",
							"    pm.expect(jsonData.name).to.eql(\"The Russian\");\r",
							"    pm.expect(jsonData.author).to.eql(\"James Patterson and James O. Born\");\r",
							"    pm.expect(jsonData.type).to.eql(\"fiction\");\r",
							"    pm.expect(jsonData.price).to.eql(12.98); \r",
							"    pm.expect(jsonData[\"current-stock\"]).to.eql(12); \r",
							"    pm.expect(jsonData.available).to.eql(true); \r",
							"});\r",
							"\r",
							"// JSON Schema Validation\r",
							"\r",
							"const schema = {\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"author\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"price\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"current-stock\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"available\": {\r",
							"      \"type\": \"boolean\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"author\",\r",
							"    \"type\",\r",
							"    \"price\",\r",
							"    \"current-stock\",\r",
							"    \"available\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"// Validate the schema using tv4\r",
							"const result = tv4.validateMultiple(jsonData, schema);\r",
							"\r",
							"// Test to ensure schema is valid\r",
							"pm.test(\"Schema is valid\", () => {\r",
							"    pm.expect(result.valid).to.be.true;  // Check if the validation passed\r",
							"});\r",
							"\r",
							"// Log any schema errors\r",
							"if (!result.valid) {\r",
							"    console.log(result.errors);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{datadriven}}//books/1",
					"host": [
						"{{datadriven}}"
					],
					"path": [
						"",
						"books",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "List of books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"The Russian\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{datadriven}}/books",
					"host": [
						"{{datadriven}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 1,\r\n  \"customerName\": \"Ubong\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{datadriven}}/orders",
					"host": [
						"{{datadriven}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Token",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"Eddie\",\r\n   \"clientEmail\": \"eddiehally@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{datadriven}}/api-clients/",
					"host": [
						"{{datadriven}}"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "datadriven",
			"value": "https://simple-books-api.glitch.me",
			"type": "string"
		},
		{
			"key": "token",
			"value": "25fc3a6783f867d16ce5bb39d356a590558f03df35446baf5abe2a9e72b90b71",
			"type": "string"
		}
	]
}